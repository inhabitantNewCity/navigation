apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.example.vlad.navigation"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        ndk {
            moduleName "myapp"
            cFlags "-DANDROID_NDK"
            ldLibs "log"
            stl "stlport_static"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug.jniDebugBuild true
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
    }
productFlavors {
    x86 {
        ndk {
            abiFilter "x86"
        }

        // this is the flavor part of the version code.
        // It must be higher than the arm one for devices supporting
        // both, as x86 is preferred.
        versionCode = 3
    }
    arm {
        ndk {
            abiFilter "armeabi-v7a"
        }
        versionCode = 2
    }
    mips {
        ndk {
            abiFilter "mips"
        }
        versionCode = 1
    }
    fat {
        // fat binary, lowest version code to be
        // the last option
        versionCode = 0
    }
}

// make per-variant version code
applicationVariants.all { variant ->
    // get the single flavor
    def flavorVersion = variant.productFlavors.get(0).versionCode

    // set the composite code
    variant.mergedFlavor.versionCode = flavorVersion * 1000000 + defaultConfig.versionCode
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
}

task nativeLibsToJar(type: Jar, description: 'create a jar archive of the native libs') {
    destinationDir file('libs')
    baseName 'native-libs'
    from fileTree(dir: 'libs', include: '*.so')
    into 'lib/'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}
